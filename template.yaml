AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for AWS/Python Developer Technical Challenge application

Globals:
  Function:
    Timeout: 5
  Api:
    Cors:
      AllowMethods: "'GET,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  Environment:
    Type: String
    Description: Choose between local or AWS
    AllowedValues:
      - local
      - aws
  DDBTableName:
    Type: String
    Description: The name of the DynamoDB tablename

Resources:
###################
##    Lambdas    ##
###################
  # lambda function to load initial data
  LoadDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/load_data
      Handler: app.lambda_handler
      Runtime: python3.7
      FunctionName: LoadDataFunction
      Environment:
        Variables:
          Environment: !Ref Environment
          DDBTableName: !Ref DDBTableName
      Policies:
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:BatchWriteItem
            Resource: !GetAtt DocumentTable.Arn
  # lambda function to retrieve a car record by id
  # GetCarByIdFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: functions/get_car_by_id_price/
  #     Handler: app.lambda_handler
  #     Runtime: python3.7
  #     FunctionName: GetCarByIdFunction
  #     Events:
  #       GetDocument:
  #         Type: Api
  #         Properties:
  #           Path: /document
  #           Method: get
  #           RequestParameters:
  #             - method.request.querystring.id
  #           RestApiId: !Ref MyApi
  #     Environment:
  #       Variables:
  #         Environment: !Ref Environment
  #         DDBTableName: !Ref DDBTableName
  #     Policies:
  #       - Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - logs:CreateLogGroup
  #           - logs:CreateLogStream
  #           - logs:PutLogEvents
  #           Resource: arn:aws:logs:*:*:*
  #         - Effect: Allow
  #           Action:
  #           - dynamodb:getItem
  #           Resource: !GetAtt DocumentTable.Arn
  # lambda function to get average price based on make
  GetAveragePriceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_average_price/
      Handler: app.lambda_handler
      Runtime: python3.7
      FunctionName: GetAveragePriceFunction
      Events:
        GetDocument:
          Type: Api
          Properties:
            Path: /document
            Method: get
            RequestParameters:
              - method.request.querystring.make
              - method.request.querystring.price
            RestApiId: !Ref MyApi
      Environment:
        Variables:
          Environment: !Ref Environment
          DDBTableName: !Ref DDBTableName
      Policies:
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:getItem
            Resource: !GetAtt DocumentTable.Arn
  # API stage
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1

##########################
##    DynamoDB Table    ##
##########################
  # DynamoDB table to store make, model, year, chassis_no, id, last_updated and price
  DocumentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: 'make'
          AttributeType: 'S'
        -
          AttributeName: 'model'
          AttributeType: 'S'
        -
          AttributeName: 'year'
          AttributeType: 'N'
        -
          AttributeName: 'chassis_no'
          AttributeType: 'S'
        -
          AttributeName: 'id'
          AttributeType: 'N'
        -
          AttributeName: 'last_updated'
          AttributeType: 'S'
        -
          AttributeName: 'price'
          AttributeType: 'N'
      KeySchema:
        -
          AttributeName: 'chassis_no'
          KeyType: 'HASH'
        -
          AttributeName: 'id'
          KeyType: 'RANGE'
      TableName: !Ref DDBTableName
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  GetAveragePriceApi:
    Description: API Gateway endpoint URL to get average price based on make
    Value: !Sub https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/v1/document
  WebsiteURL:
    Value: !GetAtt S3Bucket.WebsiteURL
    Description: URL for static site hosted on S3
